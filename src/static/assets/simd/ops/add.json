{
  "title": "Add",
  "description": [
    "Adds each element in `a` with each element in `b`, storing the results in `q`",
    "Due to 2s-complement math, there is no difference between signed and unsigned addition."],
  "intrinsics": [
    {
      "signature": "__m128i _mm_add_epi16 (__m128i a, __m128i b)",
      "vectorLength": 128,
      "datatype": "i16",
      "tech": "sse2"
    },
    {
      "signature": "__m256i _mm256_add_epi16 (__m256i a, __m256i b)",
      "vectorLength": 256,
      "datatype": "i16",
      "tech": "avx2"
    },
    {
      "signature": "__m512i _mm512_add_epi16 (__m512i a, __m512i b)",
      "vectorLength": 512,
      "datatype": "i16",
      "tech": "avx512bw"
    },
    {
      "signature": "__m128i _mm_add_epi32 (__m128i a, __m128i b)",
      "vectorLength": 128,
      "datatype": "i32",
      "tech": "sse2"
    },
    {
      "signature": "__m256i _mm256_add_epi32 (__m256i a, __m256i b)",
      "vectorLength": 256,
      "datatype": "i32",
      "tech": "avx2"
    },
    {
      "signature": "__m512i _mm512_add_epi32 (__m512i a, __m512i b)",
      "vectorLength": 512,
      "datatype": "i32",
      "tech": "avx512dq"
    },
    {
      "signature": "__m128i _mm_add_epi64 (__m128i a, __m128i b)",
      "vectorLength": 128,
      "datatype": "i64",
      "tech": "sse2"
    },
    {
      "signature": "__m256i _mm256_add_epi64 (__m256i a, __m256i b)",
      "vectorLength": 256,
      "datatype": "i64",
      "tech": "avx2"
    },
    {
      "signature": "__m512i _mm512_add_epi64 (__m512i a, __m512i b)",
      "vectorLength": 512,
      "datatype": "i64",
      "tech": "avx512dq"
    },
    {
      "signature": "__m128i _mm_add_epi8 (__m128i a, __m128i b)",
      "vectorLength": 128,
      "datatype": "i8",
      "tech": "sse2"
    },
    {
      "signature": "__m256i _mm256_add_epi8 (__m256i a, __m256i b)",
      "vectorLength": 256,
      "datatype": "i8",
      "tech": "avx2"
    },
    {
      "signature": "__m512i _mm512_add_epi8 (__m512i a, __m512i b)",
      "vectorLength": 512,
      "datatype": "i8",
      "tech": "avx512bw"
    },
    {
      "signature": "__m128d _mm_add_pd (__m128d a, __m128d b)",
      "vectorLength": 128,
      "datatype": "f64",
      "tech": "sse"
    },
    {
      "signature": "__m256d _mm256_add_pd (__m256d a, __m256d b)",
      "vectorLength": 256,
      "datatype": "f64",
      "tech": "avx"
    },
    {
      "signature": "__m512d _mm512_add_pd (__m512d a, __m512d b)",
      "vectorLength": 512,
      "datatype": "f64",
      "tech": "avx512f"
    },
    {
      "signature": "__m128h _mm_add_ph (__m128h a, __m128h b)",
      "vectorLength": 128,
      "datatype": "f16",
      "tech": "avx512_fp16"
    },
    {
      "signature": "__m256h _mm256_add_ph (__m256h a, __m256h b)",
      "vectorLength": 256,
      "datatype": "f16",
      "tech": "avx512_fp16"
    },
    {
      "signature": "__m512h _mm512_add_ph (__m512h a, __m512h b)",
      "vectorLength": 512,
      "datatype": "f64",
      "tech": "avx512_fp16"
    },
    {
      "signature": "__m128 _mm_add_ps (__m128 a, __m128 b)",
      "vectorLength": 128,
      "datatype": "f32",
      "tech": "sse"
    },
    {
      "signature": "__m256 _mm256_add_ps (__m256 a, __m256 b)",
      "vectorLength": 256,
      "datatype": "f32",
      "tech": "avx"
    },
    {
      "signature": "__m512 _mm512_add_ps (__m512 a, __m512 b)",
      "vectorLength": 512,
      "datatype": "f32",
      "tech": "avx512f"
    }
  ]
}